name: 📊 Codex Dashboard Update

on:
  workflow_run:
    workflows: ["🔍 MirrorWatcherAI Automation"]
    types:
      - completed
  
  workflow_dispatch:
    # Manual trigger for testing and immediate processing
    inputs:
      force_processing:
        description: 'Force processing even if no new analysis data'
        required: false
        default: false
        type: boolean
      
      analysis_run_id:
        description: 'Specific MirrorWatcherAI run ID to process'
        required: false
        type: string
      
      skip_validation:
        description: 'Skip data integrity validation'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  PROCESSING_TIMEOUT: '900'  # 15 minutes
  ARTIFACT_RETENTION_DAYS: 30

jobs:
  process-analysis-results:
    name: 🔄 Process Analysis Results
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    # Only run if MirrorWatcherAI completed successfully or if manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    outputs:
      processing-status: ${{ steps.processing.outputs.status }}
      glyphs-generated: ${{ steps.glyph-processing.outputs.glyphs-count }}
      snapshot-created: ${{ steps.constellation.outputs.snapshot-id }}
      dashboard-updated: ${{ steps.dashboard.outputs.update-status }}
    
    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: 🐍 Setup Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          echo "Dependencies installed successfully"
      
      - name: 📥 Download MirrorWatcherAI Artifacts
        id: download-artifacts
        if: github.event_name == 'workflow_run'
        run: |
          echo "::group::Download Analysis Artifacts"
          
          # Get the workflow run ID
          if [ -n "${{ github.event.inputs.analysis_run_id }}" ]; then
            RUN_ID="${{ github.event.inputs.analysis_run_id }}"
          else
            RUN_ID="${{ github.event.workflow_run.id }}"
          fi
          
          echo "Downloading artifacts from run ID: ${RUN_ID}"
          
          # Create artifacts directory
          mkdir -p artifacts
          
          # Download artifacts using GitHub CLI (if available) or curl
          if command -v gh &> /dev/null; then
            gh run download ${RUN_ID} --dir artifacts/ || echo "Warning: Could not download artifacts via gh"
          else
            echo "GitHub CLI not available, checking for existing artifacts"
          fi
          
          # List available artifacts
          echo "Available artifacts:"
          ls -la artifacts/ || echo "No artifacts directory found"
          
          echo "artifacts-available=true" >> $GITHUB_OUTPUT
          echo "::endgroup::"
      
      - name: 🔍 Validate Analysis Data
        id: validation
        if: github.event.inputs.skip_validation != 'true'
        run: |
          echo "::group::Data Validation"
          
          # Check for analysis files
          ANALYSIS_FILES=$(find artifacts/ -name "analysis_*.json" 2>/dev/null | wc -l)
          echo "Found ${ANALYSIS_FILES} analysis files"
          
          if [ ${ANALYSIS_FILES} -eq 0 ] && [ "${{ github.event.inputs.force_processing }}" != "true" ]; then
            echo "validation-status=failed" >> $GITHUB_OUTPUT
            echo "❌ No analysis files found and force processing not enabled"
            exit 1
          fi
          
          # Validate JSON structure of analysis files
          for file in artifacts/analysis_*.json; do
            if [ -f "$file" ]; then
              echo "Validating: $file"
              if ! python -m json.tool "$file" > /dev/null; then
                echo "validation-status=failed" >> $GITHUB_OUTPUT
                echo "❌ Invalid JSON in file: $file"
                exit 1
              fi
            fi
          done
          
          echo "validation-status=success" >> $GITHUB_OUTPUT
          echo "✅ Data validation completed successfully"
          echo "::endgroup::"
      
      - name: ⚡ Process Glyph Emissions
        id: glyph-processing
        run: |
          echo "::group::Glyph Emission Processing"
          
          # Run glyph emission processor
          if [ "${{ github.event.inputs.force_processing }}" == "true" ]; then
            echo "Force processing enabled - processing latest available analysis"
            python scripts/processors/glyph_emitter.py --output-dir artifacts --data-dir data --verbose
          else
            echo "Processing latest analysis data"
            python scripts/processors/glyph_emitter.py --output-dir artifacts --data-dir data --verbose
          fi
          
          if [ $? -eq 0 ]; then
            echo "processing-status=success" >> $GITHUB_OUTPUT
            
            # Count generated glyphs
            GLYPH_COUNT=$(python -c "import json; data=json.load(open('data/codexGlyphs.json')); print(len(data.get('glyphs', [])))" 2>/dev/null || echo "0")
            echo "glyphs-count=${GLYPH_COUNT}" >> $GITHUB_OUTPUT
            echo "✅ Glyph processing completed. Total glyphs: ${GLYPH_COUNT}"
          else
            echo "processing-status=failed" >> $GITHUB_OUTPUT
            echo "❌ Glyph processing failed"
            exit 1
          fi
          
          echo "::endgroup::"
      
      - name: 🌌 Generate Constellation Snapshot
        id: constellation
        if: steps.glyph-processing.outputs.processing-status == 'success'
        run: |
          echo "::group::Constellation Snapshot Generation"
          
          # Generate constellation snapshot
          python scripts/generators/snapshot_creator.py --data-dir data --verbose
          
          if [ $? -eq 0 ]; then
            echo "snapshot-status=success" >> $GITHUB_OUTPUT
            
            # Get the latest snapshot ID
            SNAPSHOT_ID=$(python -c "import json; data=json.load(open('data/constellationSnapshots.json')); snapshots=data.get('snapshots',[]); print(snapshots[-1].get('id','none') if snapshots else 'none')" 2>/dev/null || echo "error")
            echo "snapshot-id=${SNAPSHOT_ID}" >> $GITHUB_OUTPUT
            echo "✅ Constellation snapshot generated: ${SNAPSHOT_ID}"
          else
            echo "snapshot-status=failed" >> $GITHUB_OUTPUT
            echo "❌ Constellation snapshot generation failed"
            exit 1
          fi
          
          echo "::endgroup::"
      
      - name: 🎯 Update Dashboard Components
        id: dashboard
        if: steps.constellation.outputs.snapshot-status == 'success'
        run: |
          echo "::group::Dashboard Update"
          
          # Create dashboard update summary
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          cat > artifacts/dashboard_update.json << EOF
          {
            "update_timestamp": "${TIMESTAMP}",
            "workflow_run_id": "${{ github.run_id }}",
            "source_analysis_run": "${{ github.event.workflow_run.id || github.event.inputs.analysis_run_id || 'manual' }}",
            "glyphs_processed": "${{ steps.glyph-processing.outputs.glyphs-count }}",
            "constellation_snapshot": "${{ steps.constellation.outputs.snapshot-id }}",
            "status": "completed"
          }
          EOF
          
          # Update last update timestamp
          echo "${TIMESTAMP}" > data/last_dashboard_update.txt
          
          # Validate data integrity
          echo "Validating data integrity..."
          python scripts/generators/snapshot_creator.py --data-dir data --validate
          
          if [ $? -eq 0 ]; then
            echo "update-status=success" >> $GITHUB_OUTPUT
            echo "✅ Dashboard components updated successfully"
          else
            echo "update-status=failed" >> $GITHUB_OUTPUT
            echo "⚠️ Dashboard update completed with integrity warnings"
          fi
          
          echo "::endgroup::"
      
      - name: 📊 Generate Processing Report
        id: reporting
        if: always()
        run: |
          echo "::group::Processing Report Generation"
          
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          # Create comprehensive processing report
          cat > artifacts/codex_processing_report.json << EOF
          {
            "processing_id": "codex_${{ github.run_number }}_$(date +%s)",
            "timestamp": "${TIMESTAMP}",
            "trigger": "${{ github.event_name }}",
            "workflow_run_id": "${{ github.run_id }}",
            "source_analysis": {
              "run_id": "${{ github.event.workflow_run.id || github.event.inputs.analysis_run_id || 'manual' }}",
              "conclusion": "${{ github.event.workflow_run.conclusion || 'manual' }}"
            },
            "processing_results": {
              "validation_status": "${{ steps.validation.outputs.validation-status }}",
              "glyph_processing": {
                "status": "${{ steps.glyph-processing.outputs.processing-status }}",
                "glyphs_count": "${{ steps.glyph-processing.outputs.glyphs-count }}"
              },
              "constellation_generation": {
                "status": "${{ steps.constellation.outputs.snapshot-status }}",
                "snapshot_id": "${{ steps.constellation.outputs.snapshot-id }}"
              },
              "dashboard_update": {
                "status": "${{ steps.dashboard.outputs.update-status }}"
              }
            },
            "overall_status": "${{ job.status }}"
          }
          EOF
          
          # Create human-readable report
          cat > artifacts/codex_processing_report.md << EOF
          # 📊 Codex Dashboard Processing Report
          
          **Processing ID:** \`codex_${{ github.run_number }}_$(date +%s)\`  
          **Timestamp:** ${TIMESTAMP}  
          **Trigger:** ${{ github.event_name }}  
          **Workflow:** [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ## 🔄 Processing Results
          
          ### Glyph Processing
          - **Status:** ${{ steps.glyph-processing.outputs.processing-status }}
          - **Glyphs Generated:** ${{ steps.glyph-processing.outputs.glyphs-count }}
          
          ### Constellation Generation
          - **Status:** ${{ steps.constellation.outputs.snapshot-status }}
          - **Snapshot ID:** ${{ steps.constellation.outputs.snapshot-id }}
          
          ### Dashboard Update
          - **Status:** ${{ steps.dashboard.outputs.update-status }}
          
          ## 📈 Data Summary
          
          The Codex visualization system has been updated with the latest analysis data from MirrorWatcherAI.
          
          ---
          
          *Generated by Codex Dashboard Update Workflow v1.0.0*
          EOF
          
          echo "✅ Processing report generated"
          echo "::endgroup::"
      
      - name: 📤 Upload Processing Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: codex-processing-${{ github.run_number }}
          path: |
            artifacts/
            data/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          compression-level: 6
      
      - name: 🔄 Commit Updated Data
        if: steps.dashboard.outputs.update-status == 'success'
        run: |
          echo "::group::Commit Data Updates"
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add updated data files
          git add data/codexGlyphs.json
          git add data/constellationSnapshots.json
          git add data/last_dashboard_update.txt
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "📊 Update Codex data - Glyphs: ${{ steps.glyph-processing.outputs.glyphs-count }}, Snapshot: ${{ steps.constellation.outputs.snapshot-id }}"
            git push
            echo "✅ Data updates committed and pushed"
          fi
          
          echo "::endgroup::"

  notification:
    name: 📢 Processing Notifications
    runs-on: ubuntu-latest
    needs: process-analysis-results
    if: always()
    
    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 📊 Processing Summary
        env:
          PROCESSING_STATUS: ${{ needs.process-analysis-results.outputs.processing-status }}
          GLYPHS_GENERATED: ${{ needs.process-analysis-results.outputs.glyphs-generated }}
          SNAPSHOT_CREATED: ${{ needs.process-analysis-results.outputs.snapshot-created }}
          DASHBOARD_UPDATED: ${{ needs.process-analysis-results.outputs.dashboard-updated }}
        run: |
          echo "::group::Processing Summary"
          echo "📊 Codex Dashboard Processing Complete"
          echo ""
          echo "🔄 Processing Results:"
          echo "   Status: ${PROCESSING_STATUS}"
          echo "   Glyphs Generated: ${GLYPHS_GENERATED}"
          echo "   Constellation Snapshot: ${SNAPSHOT_CREATED}"
          echo "   Dashboard Updated: ${DASHBOARD_UPDATED}"
          echo ""
          echo "🔗 Full Report: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "::endgroup::"
      
      - name: 🚨 Processing Alert Check
        if: needs.process-analysis-results.outputs.processing-status == 'failed' || needs.process-analysis-results.outputs.dashboard-updated == 'failed'
        run: |
          echo "::error::🚨 ALERT: Codex processing encountered issues!"
          echo "::error::Processing Status: ${{ needs.process-analysis-results.outputs.processing-status }}"
          echo "::error::Dashboard Update: ${{ needs.process-analysis-results.outputs.dashboard-updated }}"
          
          # This would integrate with external alerting systems
          # For now, we use GitHub's built-in error reporting
      
      - name: ✅ Success Notification
        if: needs.process-analysis-results.outputs.processing-status == 'success' && needs.process-analysis-results.outputs.dashboard-updated == 'success'
        run: |
          echo "✅ Codex dashboard processing completed successfully!"
          echo "🎯 Dashboard updated with latest visualization data"
          echo "📈 Glyphs processed: ${{ needs.process-analysis-results.outputs.glyphs-generated }}"
          echo "🌌 Constellation snapshot: ${{ needs.process-analysis-results.outputs.snapshot-created }}"