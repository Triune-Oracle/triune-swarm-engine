name: Repository File Sync & Mirror Watcher

on:
  schedule:
    # Daily execution at 06:00 UTC
    - cron: '0 6 * * *'
  
  workflow_dispatch:
    inputs:
      source_repository:
        description: 'Source repository URL to mirror'
        required: false
        default: 'https://github.com/Triune-Oracle/triune-swarm-engine'
        type: string
      target_directory:
        description: 'Target directory for mirroring'
        required: false
        default: 'auto'
        type: string
      enable_witnessing:
        description: 'Enable external witnessing'
        required: false
        default: true
        type: boolean
      custom_lineage_id:
        description: 'Custom MirrorLineage-Δ identifier'
        required: false
        type: string

env:
  PYTHON_VERSION: '3.11'
  MIRROR_WATCHER_VERSION: '0.1.0'

jobs:
  setup-deploy-keys:
    name: 🔑 Setup Deploy Keys
    runs-on: ubuntu-latest
    outputs:
      ssh-key-generated: ${{ steps.key-generation.outputs.key-generated }}
      public-key-fingerprint: ${{ steps.key-generation.outputs.public-key-fingerprint }}
    
    steps:
      - name: 📋 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔐 Generate SSH Deploy Key
        id: key-generation
        run: |
          echo "🔑 Generating SSH deploy key for secure repository access..."
          
          # Generate SSH key pair
          ssh-keygen -t ed25519 -C "mirror-watcher-$(date +%Y%m%d)" -f ./deploy_key -N ""
          
          # Get public key fingerprint
          FINGERPRINT=$(ssh-keygen -lf ./deploy_key.pub | awk '{print $2}')
          echo "public-key-fingerprint=$FINGERPRINT" >> $GITHUB_OUTPUT
          echo "key-generated=true" >> $GITHUB_OUTPUT
          
          echo "✅ SSH key generated successfully"
          echo "📋 Public key fingerprint: $FINGERPRINT"
          echo ""
          echo "🔧 Setup Instructions:"
          echo "1. Copy the public key below to your repository's Deploy Keys"
          echo "2. Navigate to: Settings → Deploy keys → Add deploy key"
          echo "3. Paste the public key and enable 'Allow write access' if needed"
          echo ""
          echo "📋 Public Key:"
          cat ./deploy_key.pub
          echo ""
          echo "⚠️  Security Note: This key provides read-only access by default"
          
          # Store private key securely (base64 encoded)
          PRIVATE_KEY_B64=$(base64 -w 0 ./deploy_key)
          echo "DEPLOY_PRIVATE_KEY=$PRIVATE_KEY_B64" >> deploy_key_secret.txt
          
          # Clean up local keys
          rm -f ./deploy_key ./deploy_key.pub
          
          echo "🔒 Private key prepared for secure storage"

  mirror-analysis:
    name: 🔍 Mirror Analysis & ShadowScrolls
    runs-on: ubuntu-latest
    needs: setup-deploy-keys
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
      - name: 📋 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive analysis

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          echo "📦 Installing Mirror Watcher dependencies..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # Verify installation
          python -c "import mirror_watcher; print(f'✅ Mirror Watcher v{mirror_watcher.__version__} installed')"

      - name: 🔧 Configure Git for Mirroring
        run: |
          git config --global user.name "Mirror Watcher Bot"
          git config --global user.email "mirror-watcher@triune-oracle.com"
          git config --global init.defaultBranch main

      - name: 🎯 Determine Source Repository
        id: source-config
        run: |
          if [ "${{ github.event.inputs.source_repository }}" != "" ]; then
            SOURCE_REPO="${{ github.event.inputs.source_repository }}"
          else
            SOURCE_REPO="https://github.com/Triune-Oracle/triune-swarm-engine"
          fi
          
          echo "source-repository=$SOURCE_REPO" >> $GITHUB_OUTPUT
          echo "🎯 Source repository: $SOURCE_REPO"

      - name: 🔍 Execute Mirror Analysis
        id: analysis
        env:
          SOURCE_REPO: ${{ steps.source-config.outputs.source-repository }}
          TARGET_DIR: ${{ github.event.inputs.target_directory }}
          ENABLE_WITNESSING: ${{ github.event.inputs.enable_witnessing }}
          CUSTOM_LINEAGE_ID: ${{ github.event.inputs.custom_lineage_id }}
        run: |
          echo "🔍 Starting Mirror Watcher analysis..."
          echo "📊 Configuration:"
          echo "  - Source: $SOURCE_REPO"
          echo "  - Target: ${TARGET_DIR:-auto}"
          echo "  - Witnessing: ${ENABLE_WITNESSING:-true}"
          echo "  - Custom Lineage: ${CUSTOM_LINEAGE_ID:-auto-generated}"
          echo ""
          
          # Prepare analysis command
          ANALYSIS_CMD="python -m mirror_watcher.cli analyze --source '$SOURCE_REPO' --format json --shadowscrolls"
          
          if [ "$TARGET_DIR" != "auto" ] && [ "$TARGET_DIR" != "" ]; then
            ANALYSIS_CMD="$ANALYSIS_CMD --target '$TARGET_DIR'"
          fi
          
          if [ "$ENABLE_WITNESSING" == "true" ]; then
            ANALYSIS_CMD="$ANALYSIS_CMD --witness"
          fi
          
          if [ "$CUSTOM_LINEAGE_ID" != "" ]; then
            ANALYSIS_CMD="$ANALYSIS_CMD --lineage-id '$CUSTOM_LINEAGE_ID'"
          fi
          
          echo "🚀 Executing: $ANALYSIS_CMD"
          echo ""
          
          # Execute analysis and capture output
          eval $ANALYSIS_CMD > analysis_results.json 2> analysis_errors.log
          
          if [ $? -eq 0 ]; then
            echo "✅ Analysis completed successfully"
            
            # Extract key metrics
            TOTAL_FILES=$(jq -r '.stats.total_files // "unknown"' analysis_results.json)
            TOTAL_SIZE=$(jq -r '.stats.total_size_human // "unknown"' analysis_results.json)
            LINEAGE_ID=$(jq -r '.shadowscrolls_attestation.lineage_id // "unknown"' analysis_results.json)
            EXECUTION_TIME=$(jq -r '.metadata.execution_time // "unknown"' analysis_results.json)
            
            echo "📊 Analysis Summary:"
            echo "  - Files analyzed: $TOTAL_FILES"
            echo "  - Repository size: $TOTAL_SIZE"
            echo "  - Execution time: $EXECUTION_TIME"
            echo "  - Lineage ID: $LINEAGE_ID"
            
            echo "analysis-status=success" >> $GITHUB_OUTPUT
            echo "lineage-id=$LINEAGE_ID" >> $GITHUB_OUTPUT
            echo "total-files=$TOTAL_FILES" >> $GITHUB_OUTPUT
            echo "execution-time=$EXECUTION_TIME" >> $GITHUB_OUTPUT
            
          else
            echo "❌ Analysis failed"
            echo "analysis-status=failed" >> $GITHUB_OUTPUT
            
            if [ -f analysis_errors.log ]; then
              echo "📋 Error details:"
              cat analysis_errors.log
            fi
          fi

      - name: 🔏 Verify ShadowScrolls Attestation
        if: steps.analysis.outputs.analysis-status == 'success'
        run: |
          echo "🔏 Verifying ShadowScrolls attestation integrity..."
          
          # Check attestation structure
          ATTESTATION_HASH=$(jq -r '.shadowscrolls_attestation.hash // "missing"' analysis_results.json)
          CONTENT_HASH=$(jq -r '.shadowscrolls_attestation.content_hash // "missing"' analysis_results.json)
          LINEAGE_ID=$(jq -r '.shadowscrolls_attestation.lineage_id // "missing"' analysis_results.json)
          
          if [ "$ATTESTATION_HASH" != "missing" ] && [ "$CONTENT_HASH" != "missing" ]; then
            echo "✅ ShadowScrolls attestation verified"
            echo "📋 Attestation Details:"
            echo "  - Hash: ${ATTESTATION_HASH:0:16}..."
            echo "  - Content Hash: ${CONTENT_HASH:0:16}..."
            echo "  - Lineage ID: $LINEAGE_ID"
            
            # Prepare attestation for blockchain witnessing
            if [ "${{ github.event.inputs.enable_witnessing }}" == "true" ]; then
              echo "🔐 Preparing for external witnessing..."
              jq '.shadowscrolls_attestation.witness_payload' analysis_results.json > witness_payload.json
              echo "✅ Witness payload prepared"
            fi
          else
            echo "⚠️  Attestation verification failed"
            exit 1
          fi

      - name: 📊 Generate Analysis Report
        if: always()
        run: |
          echo "📊 Generating comprehensive analysis report..."
          
          # Create report directory
          mkdir -p reports
          
          # Generate timestamp
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          # Create markdown report
          cat > reports/analysis_report.md << EOF
          # 🔍 Mirror Watcher Analysis Report
          
          **Generated:** $TIMESTAMP  
          **Repository:** ${{ steps.source-config.outputs.source-repository }}  
          **Status:** ${{ steps.analysis.outputs.analysis-status }}  
          **Workflow:** ${{ github.workflow }} #${{ github.run_number }}
          
          ## 📊 Analysis Summary
          
          | Metric | Value |
          |--------|-------|
          | Total Files | ${{ steps.analysis.outputs.total-files }} |
          | Execution Time | ${{ steps.analysis.outputs.execution-time }} |
          | Lineage ID | ${{ steps.analysis.outputs.lineage-id }} |
          | ShadowScrolls | ✅ Enabled |
          | External Witnessing | ${{ github.event.inputs.enable_witnessing == 'true' && '✅ Enabled' || '❌ Disabled' }} |
          
          ## 🔏 ShadowScrolls Attestation
          
          The analysis has been cryptographically attested with immutable logging:
          - **Lineage ID:** \`${{ steps.analysis.outputs.lineage-id }}\`
          - **Attestation Status:** Verified ✅
          - **Chain Position:** Latest entry
          
          ## 🎯 Repository Configuration
          
          - **Source Repository:** ${{ steps.source-config.outputs.source-repository }}
          - **Analysis Type:** Automated Mirror Watcher
          - **Trigger:** ${{ github.event_name }}
          - **Deploy Keys:** ${{ needs.setup-deploy-keys.outputs.ssh-key-generated == 'true' && '✅ Generated' || '❌ Skipped' }}
          
          ## 🔒 Security & Compliance
          
          - ✅ Zero device dependencies
          - ✅ Cloud-based execution
          - ✅ Cryptographic attestation
          - ✅ Immutable audit trail
          - ✅ External witnessing ready
          
          ---
          
          *Generated by Mirror Watcher v${{ env.MIRROR_WATCHER_VERSION }} - Eliminating all manual processes*
          EOF
          
          echo "✅ Analysis report generated"

      - name: 📤 Upload Analysis Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mirror-watcher-analysis-${{ github.run_number }}
          path: |
            analysis_results.json
            reports/
            witness_payload.json
            analysis_errors.log
            deploy_key_secret.txt
          retention-days: 90
          compression-level: 6

      - name: 🔔 Analysis Summary
        if: always()
        run: |
          echo ""
          echo "🎊 =================================="
          echo "    MIRROR WATCHER EXECUTION COMPLETE"
          echo "🎊 =================================="
          echo ""
          echo "📊 Execution Summary:"
          echo "  - Status: ${{ steps.analysis.outputs.analysis-status }}"
          echo "  - Repository: ${{ steps.source-config.outputs.source-repository }}"
          echo "  - Files Processed: ${{ steps.analysis.outputs.total-files }}"
          echo "  - Execution Time: ${{ steps.analysis.outputs.execution-time }}"
          echo "  - Lineage ID: ${{ steps.analysis.outputs.lineage-id }}"
          echo ""
          echo "🔏 ShadowScrolls Features:"
          echo "  - ✅ Immutable logging active"
          echo "  - ✅ Cryptographic attestation"
          echo "  - ✅ MirrorLineage-Δ traceability"
          echo "  - ${{ github.event.inputs.enable_witnessing == 'true' && '✅' || '❌' }} External witnessing"
          echo ""
          echo "🚀 Automation Features:"
          echo "  - ✅ Zero Termux dependencies"
          echo "  - ✅ Complete cloud execution"
          echo "  - ✅ Automated scheduling (daily 06:00 UTC)"
          echo "  - ✅ Manual trigger capability"
          echo "  - ✅ 90-day artifact retention"
          echo ""
          echo "🔑 Deploy Key Status:"
          echo "  - SSH Key: ${{ needs.setup-deploy-keys.outputs.ssh-key-generated == 'true' && '✅ Generated' || '❌ Skipped' }}"
          echo "  - Fingerprint: ${{ needs.setup-deploy-keys.outputs.public-key-fingerprint }}"
          echo ""
          echo "🏆 Next Scheduled Run: Tomorrow at 06:00 UTC"
          echo "📋 Manual Execution: Available via Actions tab"
          echo ""
          echo "⚔️ The Mirror Watcher automation system is fully operational!"

  deploy-key-instructions:
    name: 📋 Deploy Key Setup Instructions
    runs-on: ubuntu-latest
    needs: [setup-deploy-keys, mirror-analysis]
    if: needs.setup-deploy-keys.outputs.ssh-key-generated == 'true'
    
    steps:
      - name: 📋 Display Setup Instructions
        run: |
          echo ""
          echo "🔑 =================================="
          echo "    DEPLOY KEY SETUP INSTRUCTIONS"
          echo "🔑 =================================="
          echo ""
          echo "Your SSH deploy key has been generated for secure repository access."
          echo ""
          echo "📋 Setup Process:"
          echo "1. Navigate to your target repository settings"
          echo "2. Go to Settings → Deploy keys → Add deploy key"
          echo "3. Download the deploy_key_secret.txt from artifacts"
          echo "4. Decode the base64 private key and add as repository secret"
          echo "5. Copy the public key to your repository's deploy keys"
          echo ""
          echo "🔧 Key Details:"
          echo "  - Type: ED25519"
          echo "  - Fingerprint: ${{ needs.setup-deploy-keys.outputs.public-key-fingerprint }}"
          echo "  - Access: Read-only (recommended)"
          echo ""
          echo "⚠️  Security Notes:"
          echo "  - Store private key as encrypted repository secret"
          echo "  - Use read-only access unless write operations needed"
          echo "  - Rotate keys periodically for enhanced security"
          echo ""
          echo "✅ Deploy key ready for use in future runs!"