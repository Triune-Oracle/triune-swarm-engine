name: CI - Triune Swarm Engine

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  typecheck:
    name: TypeScript Type Checking
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run TypeScript type check
        run: npm run lint
        
  test-node:
    name: Node.js Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Test core engine files
        run: |
          cd src/core
          node --check server.js
          node --check loop_engine.js
          node --check relay_loop.js
          node --check wallet-router.js
          
      - name: Test app components
        run: |
          cd src/app/components
          node --check dashboard.js
          
      - name: Test utilities
        run: |
          cd src/utils
          node --check send-token.js
          node --check nftTrigger.js
          
  test-python:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run Python tests
        run: |
          cd tests
          python test_analyzer.py
          
      - name: Test Mirror Watcher AI
        run: |
          cd src/mirror_watcher_ai
          python -m pytest . -v
          
  validate-schemas:
    name: Validate JSON Schemas
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Validate JSON files
        run: |
          # Validate schema files
          for file in schemas/*.json; do
            echo "Validating $file"
            node -e "JSON.parse(require('fs').readFileSync('$file', 'utf8'))"
          done
          
      - name: Validate configuration files
        run: |
          node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"
          node -e "JSON.parse(require('fs').readFileSync('agent_state.json', 'utf8'))"
          node -e "JSON.parse(require('fs').readFileSync('events.json', 'utf8'))"
          
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [typecheck, test-node, test-python, validate-schemas]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          npm ci
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Test directory structure
        run: |
          # Verify new directory structure exists
          test -d src/app/components
          test -d src/app/pages
          test -d src/core
          test -d src/modules
          test -d src/utils
          test -d schemas
          test -d public
          test -d docs/diagrams
          
      - name: Test file locations
        run: |
          # Verify core files are in correct locations
          test -f src/core/server.js
          test -f src/core/loop_engine.js
          test -f src/app/components/triumvirate-monitor.tsx
          test -f schemas/wallet_config.json
          test -f public/index.html
          
      - name: Test import paths
        run: |
          # Test that updated import paths work
          cd src/core && node -e "require('./server.js')"