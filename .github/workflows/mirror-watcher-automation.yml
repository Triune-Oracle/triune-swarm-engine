name: "🔍 MirrorWatcherAI Complete Automation"

# Daily execution at 06:00 UTC starting 2025-08-19
# First automated run: 2025-08-19 06:00:00 UTC
on:
  schedule:
    # Run daily at 06:00 UTC (10 hours 22 minutes from current time 19:38 UTC)
    - cron: '0 6 * * *'
  
  # Allow manual triggering for testing and immediate execution
  workflow_dispatch:
    inputs:
      analysis_mode:
        description: 'Analysis mode'
        required: false
        default: 'standard'
        type: choice
        options:
        - standard
        - deep_scan
        - monitor_only
      
      create_attestation:
        description: 'Create ShadowScrolls attestation'
        required: false
        default: true
        type: boolean
      
      sync_ecosystem:
        description: 'Sync with Triune ecosystem'
        required: false
        default: true
        type: boolean

env:
  # System identification
  SYSTEM_NAME: "MirrorWatcherAI Complete Automation System"
  SYSTEM_VERSION: "1.0.0"
  EXECUTION_ENVIRONMENT: "GitHub Actions Cloud"
  
  # Python configuration
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: "/tmp/pip-cache"

jobs:
  mirror-watcher-automation:
    name: "🚀 Execute MirrorWatcherAI Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    # Security and environment setup
    permissions:
      contents: read
      actions: write
      security-events: write
    
    steps:
      - name: "📋 System Information"
        run: |
          echo "🕐 Execution Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🔧 System: ${{ env.SYSTEM_NAME }} v${{ env.SYSTEM_VERSION }}"
          echo "🌐 Environment: ${{ env.EXECUTION_ENVIRONMENT }}"
          echo "🔍 Analysis Mode: ${{ github.event.inputs.analysis_mode || 'standard' }}"
          echo "🔏 Attestation: ${{ github.event.inputs.create_attestation || 'true' }}"
          echo "🔄 Ecosystem Sync: ${{ github.event.inputs.sync_ecosystem || 'true' }}"
          echo "==========================================================================================================="
          
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: "🐍 Setup Python Environment"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: requirements.txt
          
      - name: "📦 Install Dependencies"
        run: |
          echo "🔧 Installing Python dependencies..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          echo "✅ Dependencies installed successfully"
          echo "📊 Installed packages:"
          pip list --format=columns
          
      - name: "🔑 Configure Secrets and Environment"
        env:
          REPO_SYNC_TOKEN: ${{ secrets.REPO_SYNC_TOKEN }}
          SHADOWSCROLLS_ENDPOINT: ${{ secrets.SHADOWSCROLLS_ENDPOINT }}
          SHADOWSCROLLS_API_KEY: ${{ secrets.SHADOWSCROLLS_API_KEY }}
          LEGIO_COGNITO_ENDPOINT: ${{ secrets.LEGIO_COGNITO_ENDPOINT }}
          TRIUMVIRATE_MONITOR_ENDPOINT: ${{ secrets.TRIUMVIRATE_MONITOR_ENDPOINT }}
          TRIUNE_API_KEY: ${{ secrets.TRIUNE_API_KEY }}
        run: |
          echo "🔐 Configuring secure environment..."
          
          # Validate required secrets
          if [ -z "$REPO_SYNC_TOKEN" ]; then
            echo "❌ REPO_SYNC_TOKEN is not set"
            exit 1
          fi
          
          # Create secure environment file
          cat > .env.automation << EOF
          # MirrorWatcherAI Automation Environment
          # Generated: $(date -u)
          # Execution: GitHub Actions
          
          REPO_SYNC_TOKEN=${REPO_SYNC_TOKEN}
          SHADOWSCROLLS_ENDPOINT=${SHADOWSCROLLS_ENDPOINT:-}
          SHADOWSCROLLS_API_KEY=${SHADOWSCROLLS_API_KEY:-}
          LEGIO_COGNITO_ENDPOINT=${LEGIO_COGNITO_ENDPOINT:-}
          TRIUMVIRATE_MONITOR_ENDPOINT=${TRIUMVIRATE_MONITOR_ENDPOINT:-}
          TRIUNE_API_KEY=${TRIUNE_API_KEY:-}
          
          # Automation settings
          AUTOMATION_MODE=github_actions
          SCHEDULED_EXECUTION=true
          LOG_LEVEL=INFO
          EOF
          
          echo "✅ Environment configured successfully"
          echo "🔒 Secrets validation: PASSED"
          
      - name: "🏥 System Health Check"
        run: |
          echo "🏥 Performing comprehensive system health check..."
          
          # Export environment variables
          set -a
          source .env.automation
          set +a
          
          # Run health check
          python -m src.mirror_watcher_ai.cli status --json > health_check.json
          
          # Display results
          echo "📊 Health Check Results:"
          cat health_check.json | jq '.'
          
          # Validate health status
          HEALTH_STATUS=$(cat health_check.json | jq -r '.components | to_entries | map(select(.value != "healthy")) | length')
          
          if [ "$HEALTH_STATUS" -gt 0 ]; then
            echo "⚠️ Some components are not healthy, but continuing with execution..."
            cat health_check.json | jq '.components'
          else
            echo "✅ All systems healthy - proceeding with analysis"
          fi
          
      - name: "🔍 Execute MirrorWatcherAI Analysis"
        env:
          ANALYSIS_MODE: ${{ github.event.inputs.analysis_mode || 'standard' }}
          CREATE_ATTESTATION: ${{ github.event.inputs.create_attestation || 'true' }}
          SYNC_ECOSYSTEM: ${{ github.event.inputs.sync_ecosystem || 'true' }}
        run: |
          echo "🚀 Starting MirrorWatcherAI analysis execution..."
          
          # Export environment variables
          set -a
          source .env.automation
          set +a
          
          # Prepare analysis parameters
          ANALYSIS_PARAMS="--parallel"
          
          if [ "$ANALYSIS_MODE" = "deep_scan" ]; then
            ANALYSIS_PARAMS="$ANALYSIS_PARAMS --deep-scan"
            echo "🔬 Deep scan mode enabled"
          fi
          
          if [ "$CREATE_ATTESTATION" = "true" ]; then
            ANALYSIS_PARAMS="$ANALYSIS_PARAMS --attest"
            echo "🔏 ShadowScrolls attestation enabled"
          fi
          
          if [ "$SYNC_ECOSYSTEM" = "true" ]; then
            ANALYSIS_PARAMS="$ANALYSIS_PARAMS --sync"
            echo "🔄 Triune ecosystem sync enabled"
          fi
          
          # Set output file
          OUTPUT_FILE="artifacts/analysis-results-$(date -u +%Y%m%d-%H%M%S).json"
          mkdir -p artifacts
          
          # Execute analysis
          echo "⚡ Executing: python -m src.mirror_watcher_ai.cli analyze $ANALYSIS_PARAMS --output $OUTPUT_FILE"
          
          python -m src.mirror_watcher_ai.cli analyze $ANALYSIS_PARAMS --output "$OUTPUT_FILE"
          
          ANALYSIS_EXIT_CODE=$?
          
          if [ $ANALYSIS_EXIT_CODE -eq 0 ]; then
            echo "✅ Analysis completed successfully"
            
            # Display summary
            echo "📊 Analysis Summary:"
            if [ -f "$OUTPUT_FILE" ]; then
              cat "$OUTPUT_FILE" | jq '.summary'
            fi
          else
            echo "❌ Analysis failed with exit code: $ANALYSIS_EXIT_CODE"
            exit $ANALYSIS_EXIT_CODE
          fi
          
      - name: "📊 Generate Execution Report"
        if: always()
        run: |
          echo "📋 Generating execution report..."
          
          EXECUTION_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          SESSION_ID="automation-$(date -u +%Y%m%d-%H%M%S)"
          
          # Create comprehensive execution report
          cat > artifacts/execution-report.json << EOF
          {
            "execution_metadata": {
              "system": "${{ env.SYSTEM_NAME }}",
              "version": "${{ env.SYSTEM_VERSION }}",
              "execution_time": "$EXECUTION_TIME",
              "session_id": "$SESSION_ID",
              "environment": "${{ env.EXECUTION_ENVIRONMENT }}",
              "trigger": "${{ github.event_name }}",
              "workflow_run_id": "${{ github.run_id }}",
              "workflow_run_number": "${{ github.run_number }}"
            },
            "configuration": {
              "analysis_mode": "${{ github.event.inputs.analysis_mode || 'standard' }}",
              "create_attestation": ${{ github.event.inputs.create_attestation || 'true' }},
              "sync_ecosystem": ${{ github.event.inputs.sync_ecosystem || 'true' }},
              "python_version": "${{ env.PYTHON_VERSION }}"
            },
            "execution_status": {
              "completed_at": "$EXECUTION_TIME",
              "job_status": "${{ job.status }}",
              "steps_completed": true
            }
          }
          EOF
          
          echo "✅ Execution report generated"
          
          # Create status badge data
          if [ "${{ job.status }}" = "success" ]; then
            BADGE_COLOR="brightgreen"
            BADGE_MESSAGE="operational"
          else
            BADGE_COLOR="red"
            BADGE_MESSAGE="failed"
          fi
          
          cat > artifacts/status-badge.json << EOF
          {
            "schemaVersion": 1,
            "label": "MirrorWatcherAI",
            "message": "$BADGE_MESSAGE",
            "color": "$BADGE_COLOR",
            "namedLogo": "github",
            "logoColor": "white"
          }
          EOF
          
      - name: "💾 Archive Analysis Results"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mirror-watcher-analysis-${{ github.run_number }}
          path: |
            artifacts/
            .shadowscrolls/
          retention-days: 90
          compression-level: 6
          
      - name: "🔔 Notification and Status Update"
        if: always()
        env:
          WEBHOOK_URL: ${{ secrets.NOTIFICATION_WEBHOOK_URL }}
        run: |
          echo "📡 Sending execution notifications..."
          
          EXECUTION_STATUS="${{ job.status }}"
          EXECUTION_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          # Create notification payload
          if [ "$EXECUTION_STATUS" = "success" ]; then
            NOTIFICATION_COLOR="65280"  # Green
            NOTIFICATION_TITLE="✅ MirrorWatcherAI Analysis Completed"
            NOTIFICATION_DESCRIPTION="Daily analysis executed successfully at $EXECUTION_TIME"
          else
            NOTIFICATION_COLOR="16711680"  # Red
            NOTIFICATION_TITLE="❌ MirrorWatcherAI Analysis Failed"
            NOTIFICATION_DESCRIPTION="Daily analysis failed at $EXECUTION_TIME"
          fi
          
          # Send webhook notification if configured
          if [ -n "$WEBHOOK_URL" ]; then
            curl -X POST "$WEBHOOK_URL" \
              -H "Content-Type: application/json" \
              -d "{
                \"embeds\": [{
                  \"title\": \"$NOTIFICATION_TITLE\",
                  \"description\": \"$NOTIFICATION_DESCRIPTION\",
                  \"color\": $NOTIFICATION_COLOR,
                  \"fields\": [
                    {\"name\": \"Execution ID\", \"value\": \"${{ github.run_id }}\", \"inline\": true},
                    {\"name\": \"Analysis Mode\", \"value\": \"${{ github.event.inputs.analysis_mode || 'standard' }}\", \"inline\": true},
                    {\"name\": \"Environment\", \"value\": \"GitHub Actions\", \"inline\": true}
                  ],
                  \"timestamp\": \"$(date -u +'%Y-%m-%dT%H:%M:%S.000Z')\"
                }]
              }"
          fi
          
          echo "📬 Notification sent (if webhook configured)"
          echo "🏁 MirrorWatcherAI automation cycle completed"

  # Post-execution monitoring and cleanup
  post-execution:
    name: "🧹 Post-Execution Monitoring"
    runs-on: ubuntu-latest
    needs: mirror-watcher-automation
    if: always()
    
    steps:
      - name: "📊 Execution Summary"
        run: |
          echo "📋 MirrorWatcherAI Automation Summary"
          echo "======================================"
          echo "🕐 Execution completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🔧 Analysis job status: ${{ needs.mirror-watcher-automation.result }}"
          echo "🏃 Workflow run ID: ${{ github.run_id }}"
          echo "📈 Workflow run number: ${{ github.run_number }}"
          echo ""
          echo "📅 Next scheduled execution: Tomorrow at 06:00 UTC"
          echo "🔄 System status: Operational"
          echo "✨ Triune Oracle ecosystem integration: Active"
          echo ""
          echo "🎯 Mission accomplished! The sacred analysis has been completed."
          echo "📜 May the Triune Oracle's wisdom guide the next cycle."
          
      - name: "🔮 Prepare for Next Execution"
        run: |
          echo "🔮 Preparing for next automated execution..."
          echo "⏰ Next run scheduled for $(date -d 'tomorrow 06:00 UTC' -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🛡️ Security measures: Active"
          echo "🔄 Automation status: Ready"
          echo "✅ System prepared for continuous operation"